{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOu91QaYHQmJnrL/1dkjG8/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/PAlena/SQL/blob/main/Trying1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "QLuCN-_o0Q71"
      },
      "outputs": [],
      "source": [
        "\n",
        "import tensorflow as tf"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "9LsDZHCJWNZl"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#testbattles = pd.read_csv('testbattles.csv')\n",
        "#testplayers = pd.read_csv('testplayers.csv')\n",
        "trainbattles = pd.read_csv('trainbattles.csv')\n",
        "trainplayers = pd.read_csv('trainplayers.csv')"
      ],
      "metadata": {
        "id": "k5oZbE4nWNjO"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. Merge the two tables \n",
        "train = pd.merge(trainbattles, trainplayers, on=\"player_id\")\n",
        "\n",
        "train = train.reindex(np.random.permutation(train.index)) # shuffle the training set"
      ],
      "metadata": {
        "id": "HMZKwsfdWNma"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#train['date'].unique()\n",
        "seasonalyty? unstable? \n",
        "# class weit. We have more zeros then one\n",
        "# confusion metrics\n",
        "\n",
        "https://developers.google.com/machine-learning/crash-course/representation/feature-engineering\n",
        "do only caregorical variables???\n",
        "\n",
        "# do scaling\n",
        "\n",
        "# panal data to cross sectional data in python\n",
        "\n",
        "# cross feature? a*b"
      ],
      "metadata": {
        "id": "oYEAVgze27vA"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_norm.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        },
        "id": "uWxz8UgrvaEo",
        "outputId": "cb8c29e5-6352-466b-e7eb-673ef923f88c"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-3fd1fb51-0c1f-4e20-a87b-6a203489df97\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>damage_dealt</th>\n",
              "      <th>damage_received</th>\n",
              "      <th>kills_made</th>\n",
              "      <th>xp</th>\n",
              "      <th>shots</th>\n",
              "      <th>successful_shots</th>\n",
              "      <th>mileage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>800000.000000</td>\n",
              "      <td>800000.000000</td>\n",
              "      <td>800000.000000</td>\n",
              "      <td>800000.000000</td>\n",
              "      <td>800000.000000</td>\n",
              "      <td>800000.000000</td>\n",
              "      <td>800000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>229.336864</td>\n",
              "      <td>327.225757</td>\n",
              "      <td>0.577915</td>\n",
              "      <td>418.275371</td>\n",
              "      <td>5.497393</td>\n",
              "      <td>3.279584</td>\n",
              "      <td>897.302402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>360.579623</td>\n",
              "      <td>305.621735</td>\n",
              "      <td>1.046916</td>\n",
              "      <td>576.233115</td>\n",
              "      <td>11.290195</td>\n",
              "      <td>6.775948</td>\n",
              "      <td>596.925425</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>486.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>110.000000</td>\n",
              "      <td>250.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>232.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>765.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>288.000000</td>\n",
              "      <td>405.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>498.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1173.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9851.000000</td>\n",
              "      <td>3240.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>25902.000000</td>\n",
              "      <td>607.000000</td>\n",
              "      <td>230.000000</td>\n",
              "      <td>14576.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3fd1fb51-0c1f-4e20-a87b-6a203489df97')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3fd1fb51-0c1f-4e20-a87b-6a203489df97 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3fd1fb51-0c1f-4e20-a87b-6a203489df97');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "        damage_dealt  damage_received  ...  successful_shots        mileage\n",
              "count  800000.000000    800000.000000  ...     800000.000000  800000.000000\n",
              "mean      229.336864       327.225757  ...          3.279584     897.302402\n",
              "std       360.579623       305.621735  ...          6.775948     596.925425\n",
              "min         0.000000         0.000000  ...          0.000000       0.000000\n",
              "25%         0.000000       140.000000  ...          0.000000     486.000000\n",
              "50%       110.000000       250.000000  ...          1.000000     765.000000\n",
              "75%       288.000000       405.000000  ...          4.000000    1173.000000\n",
              "max      9851.000000      3240.000000  ...        230.000000   14576.000000\n",
              "\n",
              "[8 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# train.corr()"
      ],
      "metadata": {
        "id": "pQfemXpcyXWG"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feaurures. Outliers?\n",
        "Feature engeneering\n"
      ],
      "metadata": {
        "id": "N9ZoiS_fHhoo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "id": "F2yNXO_Qaq5P",
        "outputId": "3d55ba8e-e19d-4b76-c8cd-c8d23bbb8095"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-1d045873-9521-447b-8fba-3152b9a5375b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>player_id</th>\n",
              "      <th>battle_seq_num</th>\n",
              "      <th>date</th>\n",
              "      <th>damage_dealt</th>\n",
              "      <th>damage_received</th>\n",
              "      <th>kills_made</th>\n",
              "      <th>xp</th>\n",
              "      <th>shots</th>\n",
              "      <th>successful_shots</th>\n",
              "      <th>mileage</th>\n",
              "      <th>is_winner</th>\n",
              "      <th>survived</th>\n",
              "      <th>battle_level</th>\n",
              "      <th>is_tier_ten</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>182</td>\n",
              "      <td>81</td>\n",
              "      <td>2020-01-27</td>\n",
              "      <td>102</td>\n",
              "      <td>310</td>\n",
              "      <td>0</td>\n",
              "      <td>213</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>781</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>182</td>\n",
              "      <td>91</td>\n",
              "      <td>2020-01-27</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>207</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1763</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>182</td>\n",
              "      <td>18</td>\n",
              "      <td>2020-01-25</td>\n",
              "      <td>0</td>\n",
              "      <td>310</td>\n",
              "      <td>0</td>\n",
              "      <td>54</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>535</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>182</td>\n",
              "      <td>26</td>\n",
              "      <td>2020-01-25</td>\n",
              "      <td>107</td>\n",
              "      <td>310</td>\n",
              "      <td>1</td>\n",
              "      <td>107</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>377</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>182</td>\n",
              "      <td>83</td>\n",
              "      <td>2020-01-27</td>\n",
              "      <td>119</td>\n",
              "      <td>310</td>\n",
              "      <td>0</td>\n",
              "      <td>116</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>606</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d045873-9521-447b-8fba-3152b9a5375b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1d045873-9521-447b-8fba-3152b9a5375b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1d045873-9521-447b-8fba-3152b9a5375b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   player_id  battle_seq_num        date  ...  survived  battle_level  is_tier_ten\n",
              "0        182              81  2020-01-27  ...         0             5            0\n",
              "1        182              91  2020-01-27  ...         1             5            0\n",
              "2        182              18  2020-01-25  ...         0             5            0\n",
              "3        182              26  2020-01-25  ...         0             6            0\n",
              "4        182              83  2020-01-27  ...         0             5            0\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_norm = train.drop(columns=['date', 'player_id', 'is_tier_ten','battle_level', 'survived','is_winner','battle_seq_num'])"
      ],
      "metadata": {
        "id": "iAFps8X3o1oF"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "std_scaler = StandardScaler()\n",
        "train_norm_st = pd.DataFrame(std_scaler.fit_transform(train_norm), columns = train_norm.columns)\n",
        "train_norm_st\n",
        "\n",
        "\n",
        "#def z_score_standardization(series):\n",
        "#   return (series - series.mean()) / series.std()\n",
        "#for col in df.columns:\n",
        "#    df[col] = z_score_standardization(df[col])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "fi3jemmJarEg",
        "outputId": "cc251a3c-ebf3-4e5f-a039-f0862ba33098"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-cd199cfd-a4a5-42a7-9fff-e9f61ed76255\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>damage_dealt</th>\n",
              "      <th>damage_received</th>\n",
              "      <th>kills_made</th>\n",
              "      <th>xp</th>\n",
              "      <th>shots</th>\n",
              "      <th>successful_shots</th>\n",
              "      <th>mileage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.017574</td>\n",
              "      <td>-0.579886</td>\n",
              "      <td>-0.552017</td>\n",
              "      <td>-0.458626</td>\n",
              "      <td>-0.309773</td>\n",
              "      <td>-0.188842</td>\n",
              "      <td>-0.742643</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.211706</td>\n",
              "      <td>-0.089083</td>\n",
              "      <td>0.403170</td>\n",
              "      <td>-0.233023</td>\n",
              "      <td>-0.221200</td>\n",
              "      <td>-0.188842</td>\n",
              "      <td>0.935959</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.408611</td>\n",
              "      <td>-0.612607</td>\n",
              "      <td>-0.552017</td>\n",
              "      <td>-0.661669</td>\n",
              "      <td>0.221662</td>\n",
              "      <td>0.549062</td>\n",
              "      <td>-0.370737</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.636023</td>\n",
              "      <td>-1.070689</td>\n",
              "      <td>-0.552017</td>\n",
              "      <td>-0.524572</td>\n",
              "      <td>-0.486918</td>\n",
              "      <td>-0.484004</td>\n",
              "      <td>-1.347409</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.636023</td>\n",
              "      <td>-0.678047</td>\n",
              "      <td>-0.552017</td>\n",
              "      <td>-0.708525</td>\n",
              "      <td>-0.486918</td>\n",
              "      <td>-0.484004</td>\n",
              "      <td>-0.936973</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>799995</th>\n",
              "      <td>0.362370</td>\n",
              "      <td>-0.612607</td>\n",
              "      <td>2.313544</td>\n",
              "      <td>1.335788</td>\n",
              "      <td>0.044517</td>\n",
              "      <td>0.401482</td>\n",
              "      <td>-0.263521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>799996</th>\n",
              "      <td>-0.636023</td>\n",
              "      <td>-0.075995</td>\n",
              "      <td>-0.552017</td>\n",
              "      <td>-0.663404</td>\n",
              "      <td>-0.486918</td>\n",
              "      <td>-0.484004</td>\n",
              "      <td>0.570754</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>799997</th>\n",
              "      <td>2.181664</td>\n",
              "      <td>0.120326</td>\n",
              "      <td>0.403170</td>\n",
              "      <td>2.061189</td>\n",
              "      <td>-0.044055</td>\n",
              "      <td>0.253901</td>\n",
              "      <td>0.719852</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>799998</th>\n",
              "      <td>-0.636023</td>\n",
              "      <td>-0.808928</td>\n",
              "      <td>-0.552017</td>\n",
              "      <td>-0.684229</td>\n",
              "      <td>-0.486918</td>\n",
              "      <td>-0.484004</td>\n",
              "      <td>-0.219965</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>799999</th>\n",
              "      <td>0.329090</td>\n",
              "      <td>-1.070689</td>\n",
              "      <td>-0.552017</td>\n",
              "      <td>2.564458</td>\n",
              "      <td>0.044517</td>\n",
              "      <td>0.253901</td>\n",
              "      <td>1.254257</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>800000 rows × 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd199cfd-a4a5-42a7-9fff-e9f61ed76255')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cd199cfd-a4a5-42a7-9fff-e9f61ed76255 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cd199cfd-a4a5-42a7-9fff-e9f61ed76255');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "        damage_dealt  damage_received  ...  successful_shots   mileage\n",
              "0          -0.017574        -0.579886  ...         -0.188842 -0.742643\n",
              "1          -0.211706        -0.089083  ...         -0.188842  0.935959\n",
              "2          -0.408611        -0.612607  ...          0.549062 -0.370737\n",
              "3          -0.636023        -1.070689  ...         -0.484004 -1.347409\n",
              "4          -0.636023        -0.678047  ...         -0.484004 -0.936973\n",
              "...              ...              ...  ...               ...       ...\n",
              "799995      0.362370        -0.612607  ...          0.401482 -0.263521\n",
              "799996     -0.636023        -0.075995  ...         -0.484004  0.570754\n",
              "799997      2.181664         0.120326  ...          0.253901  0.719852\n",
              "799998     -0.636023        -0.808928  ...         -0.484004 -0.219965\n",
              "799999      0.329090        -1.070689  ...          0.253901  1.254257\n",
              "\n",
              "[800000 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "feautures = pd.merge(train_norm_st, train[['is_tier_ten','battle_level', 'survived','is_winner']],left_index=True, right_index=True)\n"
      ],
      "metadata": {
        "id": "WchdBkNDuXpM"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "F6gBTT2u3S2x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "X8bhNOoH3S5T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Run on TensorFlow 2.x\n",
        "%tensorflow_version 2.x"
      ],
      "metadata": {
        "id": "_mR2Iyq13S-U"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Load the imports\n",
        "\n",
        "# from __future__ import absolute_import, division, print_function, unicode_literals\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "# The following lines adjust the granularity of reporting.\n",
        "pd.options.display.max_rows = 10\n",
        "pd.options.display.float_format = \"{:.1f}\".format\n",
        "# tf.keras.backend.set_floatx('float32')\n",
        "\n",
        "print(\"Ran the import statements.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uANblpz23TA7",
        "outputId": "72943647-7e3c-4191-82ee-108741d53cfd"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ran the import statements.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Define the functions that create and train a model.\n",
        "def create_model(my_learning_rate, feature_layer, my_metrics):\n",
        "  \"\"\"Create and compile a simple classification model.\"\"\"\n",
        "  # Most simple tf.keras models are sequential.\n",
        "  model = tf.keras.models.Sequential()\n",
        "\n",
        "  # Add the feature layer (the list of features and how they are represented)\n",
        "  # to the model.\n",
        "  model.add(feature_layer)\n",
        "\n",
        "  # Funnel the regression value through a sigmoid function.\n",
        "  model.add(tf.keras.layers.Dense(units=1, input_shape=(1,),\n",
        "                                  activation=tf.sigmoid),)\n",
        "\n",
        "  # Call the compile method to construct the layers into a model that\n",
        "  # TensorFlow can execute.  Notice that we're using a different loss\n",
        "  # function for classification than for regression.    \n",
        "  model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=my_learning_rate),                                                   \n",
        "                loss=tf.keras.losses.BinaryCrossentropy(),\n",
        "                metrics=my_metrics)\n",
        "\n",
        "  return model        \n",
        "\n",
        "\n",
        "def train_model(model, dataset, epochs, label_name,\n",
        "                batch_size=None, shuffle=True):\n",
        "  \"\"\"Feed a dataset into the model in order to train it.\"\"\"\n",
        "\n",
        "  # The x parameter of tf.keras.Model.fit can be a list of arrays, where\n",
        "  # each array contains the data for one feature.  Here, we're passing\n",
        "  # every column in the dataset. Note that the feature_layer will filter\n",
        "  # away most of those columns, leaving only the desired columns and their\n",
        "  # representations as features.\n",
        "  features = {name:np.array(value) for name, value in dataset.items()}\n",
        "  label = np.array(features.pop(label_name)) \n",
        "  history = model.fit(x=features, y=label, batch_size=batch_size,\n",
        "                      epochs=epochs, shuffle=shuffle)\n",
        "  \n",
        "  # The list of epochs is stored separately from the rest of history.\n",
        "  epochs = history.epoch\n",
        "\n",
        "  # Isolate the classification metric for each epoch.\n",
        "  hist = pd.DataFrame(history.history)\n",
        "\n",
        "  return epochs, hist  \n",
        "\n",
        "print(\"Defined the create_model and train_model functions.\")   "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9kM31yfl3TDS",
        "outputId": "d6f43484-2f77-4209-e7df-40edc38c3e48"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Defined the create_model and train_model functions.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Define the plotting function.\n",
        "def plot_curve(epochs, hist, list_of_metrics):\n",
        "  \"\"\"Plot a curve of one or more classification metrics vs. epoch.\"\"\"  \n",
        "  # list_of_metrics should be one of the names shown in:\n",
        "  # https://www.tensorflow.org/tutorials/structured_data/imbalanced_data#define_the_model_and_metrics  \n",
        "\n",
        "  plt.figure()\n",
        "  plt.xlabel(\"Epoch\")\n",
        "  plt.ylabel(\"Value\")\n",
        "\n",
        "  for m in list_of_metrics:\n",
        "    x = hist[m]\n",
        "    plt.plot(epochs[1:], x[1:], label=m)\n",
        "\n",
        "  plt.legend()\n",
        "\n",
        "print(\"Defined the plot_curve function.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mbx9S9kU3TFs",
        "outputId": "7a3883c7-9e8d-42ba-f966-216cba5121bd"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Defined the plot_curve function.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create an empty list that will eventually hold all created feature columns.\n",
        "feature_columns = []\n",
        "\n",
        "# Create a numerical feature column to represent median_income.\n",
        "median_income = tf.feature_column.numeric_column(\"xp\")\n",
        "feature_columns.append(median_income)\n",
        "\n",
        "# Create a numerical feature column to represent total_rooms.\n",
        "tr = tf.feature_column.numeric_column(\"damage_dealt\")\n",
        "feature_columns.append(tr)\n",
        "\n",
        "tr1 = tf.feature_column.numeric_column(\"battle_level\")\n",
        "feature_columns.append(tr1)\n",
        "\n",
        "tr2 = tf.feature_column.numeric_column(\"survived\")\n",
        "feature_columns.append(tr2)\n",
        "\n",
        "tr3 = tf.feature_column.numeric_column(\"is_winner\")\n",
        "feature_columns.append(tr3)\n",
        "\n",
        "tr4 = tf.feature_column.numeric_column(\"damage_received\")\n",
        "feature_columns.append(tr4)\n",
        "\n",
        "tr5 = tf.feature_column.numeric_column(\"kills_made\")\n",
        "feature_columns.append(tr5)\n",
        "\n",
        "tr6 = tf.feature_column.numeric_column(\"shots\")\n",
        "feature_columns.append(tr6)\n",
        "\n",
        "tr7 = tf.feature_column.numeric_column(\"successful_shots\")\n",
        "feature_columns.append(tr7)\n",
        "\n",
        "tr8 = tf.feature_column.numeric_column(\"mileage\")\n",
        "feature_columns.append(tr8)\n",
        "\n",
        "# Convert the list of feature columns into a layer that will later be fed into\n",
        "# the model. \n",
        "feature_layer = layers.DenseFeatures(feature_columns)\n",
        "\n",
        "# Print the first 3 and last 3 rows of the feature_layer's output when applied\n",
        "# to train_df_norm:\n",
        "feature_layer(dict(feautures))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q5xWaRnQ7dOe",
        "outputId": "b3004a7e-1630-4a4a-b04e-22be8a5c245a"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(800000, 10), dtype=float32, numpy=\n",
              "array([[ 5.        , -0.01757411, -0.5798863 , ..., -0.18884215,\n",
              "         0.        , -0.4586261 ],\n",
              "       [ 5.        , -0.21170612, -0.08908324, ..., -0.18884215,\n",
              "         1.        , -0.23302281],\n",
              "       [ 5.        , -0.40861142, -0.6126065 , ...,  0.5490625 ,\n",
              "         0.        , -0.661669  ],\n",
              "       ...,\n",
              "       [ 4.        ,  2.1816642 ,  0.12032608, ...,  0.25390062,\n",
              "         0.        ,  2.061189  ],\n",
              "       [ 6.        , -0.6360232 , -0.8089278 , ..., -0.484004  ,\n",
              "         0.        , -0.6842294 ],\n",
              "       [ 4.        ,  0.32909018, -1.0706894 , ...,  0.25390062,\n",
              "         1.        ,  2.564458  ]], dtype=float32)>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# The following variables are the hyperparameters.\n",
        "learning_rate = 0.001\n",
        "epochs = 25\n",
        "batch_size = 1000\n",
        "label_name = \"is_tier_ten\"\n",
        "classification_threshold = 0.35\n",
        "\n",
        "# Establish the metrics the model will measure.\n",
        "METRICS = [\n",
        "      tf.keras.metrics.BinaryAccuracy(name='accuracy', \n",
        "                                      threshold=classification_threshold),\n",
        "      tf.keras.metrics.Precision(thresholds=classification_threshold,\n",
        "                                 name='precision' \n",
        "                                 ),\n",
        "      tf.keras.metrics.Recall(thresholds=classification_threshold,\n",
        "                              name=\"recall\"),\n",
        "]\n",
        "\n",
        "# Establish the model's topography.\n",
        "my_model = create_model(learning_rate, feature_layer, METRICS)\n",
        "\n",
        "# Train the model on the training set.\n",
        "epochs, hist = train_model(my_model, feautures, epochs, \n",
        "                           label_name, batch_size)\n",
        "\n",
        "# Plot a graph of the metric(s) vs. epochs.\n",
        "list_of_metrics_to_plot = ['accuracy'] \n",
        "\n",
        "plot_curve(epochs, hist, list_of_metrics_to_plot)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "sJ-EXPq03TLn",
        "outputId": "86d99c57-c1d2-46ea-b249-6fa583bcc614"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/rmsprop.py:130: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super(RMSprop, self).__init__(name, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "WARNING:tensorflow:Layers in a Sequential model should only have a single input tensor. Received: inputs={'damage_dealt': <tf.Tensor 'IteratorGetNext:1' shape=(1000,) dtype=float32>, 'damage_received': <tf.Tensor 'IteratorGetNext:2' shape=(1000,) dtype=float32>, 'kills_made': <tf.Tensor 'IteratorGetNext:4' shape=(1000,) dtype=float32>, 'xp': <tf.Tensor 'IteratorGetNext:9' shape=(1000,) dtype=float32>, 'shots': <tf.Tensor 'IteratorGetNext:6' shape=(1000,) dtype=float32>, 'successful_shots': <tf.Tensor 'IteratorGetNext:7' shape=(1000,) dtype=float32>, 'mileage': <tf.Tensor 'IteratorGetNext:5' shape=(1000,) dtype=float32>, 'battle_level': <tf.Tensor 'IteratorGetNext:0' shape=(1000,) dtype=int64>, 'survived': <tf.Tensor 'IteratorGetNext:8' shape=(1000,) dtype=int64>, 'is_winner': <tf.Tensor 'IteratorGetNext:3' shape=(1000,) dtype=int64>}. Consider rewriting this model with the Functional API.\n",
            "WARNING:tensorflow:Layers in a Sequential model should only have a single input tensor. Received: inputs={'damage_dealt': <tf.Tensor 'IteratorGetNext:1' shape=(1000,) dtype=float32>, 'damage_received': <tf.Tensor 'IteratorGetNext:2' shape=(1000,) dtype=float32>, 'kills_made': <tf.Tensor 'IteratorGetNext:4' shape=(1000,) dtype=float32>, 'xp': <tf.Tensor 'IteratorGetNext:9' shape=(1000,) dtype=float32>, 'shots': <tf.Tensor 'IteratorGetNext:6' shape=(1000,) dtype=float32>, 'successful_shots': <tf.Tensor 'IteratorGetNext:7' shape=(1000,) dtype=float32>, 'mileage': <tf.Tensor 'IteratorGetNext:5' shape=(1000,) dtype=float32>, 'battle_level': <tf.Tensor 'IteratorGetNext:0' shape=(1000,) dtype=int64>, 'survived': <tf.Tensor 'IteratorGetNext:8' shape=(1000,) dtype=int64>, 'is_winner': <tf.Tensor 'IteratorGetNext:3' shape=(1000,) dtype=int64>}. Consider rewriting this model with the Functional API.\n",
            "800/800 [==============================] - 4s 3ms/step - loss: 0.7537 - accuracy: 0.4716 - precision: 0.4604 - recall: 0.9279\n",
            "Epoch 2/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6742 - accuracy: 0.4661 - precision: 0.4591 - recall: 0.9634\n",
            "Epoch 3/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6726 - accuracy: 0.4720 - precision: 0.4612 - recall: 0.9418\n",
            "Epoch 4/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4743 - precision: 0.4620 - recall: 0.9337\n",
            "Epoch 5/25\n",
            "800/800 [==============================] - 3s 3ms/step - loss: 0.6724 - accuracy: 0.4765 - precision: 0.4628 - recall: 0.9243\n",
            "Epoch 6/25\n",
            "800/800 [==============================] - 3s 3ms/step - loss: 0.6724 - accuracy: 0.4771 - precision: 0.4630 - recall: 0.9229\n",
            "Epoch 7/25\n",
            "800/800 [==============================] - 3s 3ms/step - loss: 0.6724 - accuracy: 0.4769 - precision: 0.4630 - recall: 0.9237\n",
            "Epoch 8/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4780 - precision: 0.4634 - recall: 0.9199\n",
            "Epoch 9/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4774 - precision: 0.4631 - recall: 0.9217\n",
            "Epoch 10/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4767 - precision: 0.4629 - recall: 0.9249\n",
            "Epoch 11/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4782 - precision: 0.4634 - recall: 0.9187\n",
            "Epoch 12/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4775 - precision: 0.4632 - recall: 0.9211\n",
            "Epoch 13/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4767 - precision: 0.4629 - recall: 0.9234\n",
            "Epoch 14/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4774 - precision: 0.4632 - recall: 0.9219\n",
            "Epoch 15/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4781 - precision: 0.4635 - recall: 0.9209\n",
            "Epoch 16/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4767 - precision: 0.4629 - recall: 0.9243\n",
            "Epoch 17/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4771 - precision: 0.4630 - recall: 0.9223\n",
            "Epoch 18/25\n",
            "800/800 [==============================] - 3s 3ms/step - loss: 0.6724 - accuracy: 0.4768 - precision: 0.4629 - recall: 0.9240\n",
            "Epoch 19/25\n",
            "800/800 [==============================] - 3s 3ms/step - loss: 0.6724 - accuracy: 0.4768 - precision: 0.4629 - recall: 0.9241\n",
            "Epoch 20/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4783 - precision: 0.4635 - recall: 0.9195\n",
            "Epoch 21/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4778 - precision: 0.4633 - recall: 0.9214\n",
            "Epoch 22/25\n",
            "800/800 [==============================] - 3s 3ms/step - loss: 0.6724 - accuracy: 0.4778 - precision: 0.4633 - recall: 0.9211\n",
            "Epoch 23/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4771 - precision: 0.4630 - recall: 0.9224\n",
            "Epoch 24/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4774 - precision: 0.4631 - recall: 0.9210\n",
            "Epoch 25/25\n",
            "800/800 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4773 - precision: 0.4631 - recall: 0.9210\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = {name:np.array(value) for name, value in feautures.items()}\n",
        "label = np.array(features.pop(label_name))\n",
        "\n",
        "my_model.evaluate(x = features, y = label, batch_size=batch_size)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iS0XO79P3TOs",
        "outputId": "da340ff1-9b3e-4282-a0e2-3348c951f980"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WARNING:tensorflow:Layers in a Sequential model should only have a single input tensor. Received: inputs={'damage_dealt': <tf.Tensor 'IteratorGetNext:1' shape=(None,) dtype=float32>, 'damage_received': <tf.Tensor 'IteratorGetNext:2' shape=(None,) dtype=float32>, 'kills_made': <tf.Tensor 'IteratorGetNext:4' shape=(None,) dtype=float32>, 'xp': <tf.Tensor 'IteratorGetNext:9' shape=(None,) dtype=float32>, 'shots': <tf.Tensor 'IteratorGetNext:6' shape=(None,) dtype=float32>, 'successful_shots': <tf.Tensor 'IteratorGetNext:7' shape=(None,) dtype=float32>, 'mileage': <tf.Tensor 'IteratorGetNext:5' shape=(None,) dtype=float32>, 'battle_level': <tf.Tensor 'IteratorGetNext:0' shape=(None,) dtype=int64>, 'survived': <tf.Tensor 'IteratorGetNext:8' shape=(None,) dtype=int64>, 'is_winner': <tf.Tensor 'IteratorGetNext:3' shape=(None,) dtype=int64>}. Consider rewriting this model with the Functional API.\n",
            "534/534 [==============================] - 2s 3ms/step - loss: 0.6724 - accuracy: 0.4757\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.6723557114601135, 0.4756787419319153]"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "7Ij4pRRk3TQ3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "R6nmE4teHgnh"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#train['damage_dealt'].plot(kind='hist', figsize=(8, 5))\n",
        "#train['damage_received'].plot(kind='hist', figsize=(8, 5))\n",
        "#test_st['kills_made'].plot(kind='hist', bins=12, figsize=(8, 5))\n",
        "#test_st['xp'].plot(kind='hist', bins=12, figsize=(8, 5))\n",
        "#test_st['shots'].plot(kind='hist', bins=12, figsize=(8, 5))\n",
        "#test_st['successful_shots'].plot(kind='hist', bins=12, figsize=(8, 5))\n",
        "#test_st['mileage'].plot(kind='hist', bins=12, figsize=(8, 5))\n",
        "test_st['battle_level'].plot(kind='hist', bins=12, figsize=(8, 5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "gSypwUrKP_No",
        "outputId": "326dba5c-b025-4366-a10d-25cd538ee8ff"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f1b9d92eed0>"
            ]
          },
          "metadata": {},
          "execution_count": 59
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "id": "05NC4NBTHsZ-",
        "outputId": "af769cc1-d715-41fa-ae92-b357d5aba82a"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-a58364ed-bda3-4fb0-85bc-6bd12511f5b8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>player_id</th>\n",
              "      <th>battle_seq_num</th>\n",
              "      <th>date</th>\n",
              "      <th>damage_dealt</th>\n",
              "      <th>damage_received</th>\n",
              "      <th>kills_made</th>\n",
              "      <th>xp</th>\n",
              "      <th>shots</th>\n",
              "      <th>successful_shots</th>\n",
              "      <th>mileage</th>\n",
              "      <th>is_winner</th>\n",
              "      <th>survived</th>\n",
              "      <th>battle_level</th>\n",
              "      <th>is_tier_ten</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>182</td>\n",
              "      <td>81</td>\n",
              "      <td>2020-01-27</td>\n",
              "      <td>102</td>\n",
              "      <td>310</td>\n",
              "      <td>0</td>\n",
              "      <td>213</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>781</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>182</td>\n",
              "      <td>91</td>\n",
              "      <td>2020-01-27</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>207</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1763</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>182</td>\n",
              "      <td>18</td>\n",
              "      <td>2020-01-25</td>\n",
              "      <td>0</td>\n",
              "      <td>310</td>\n",
              "      <td>0</td>\n",
              "      <td>54</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>535</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>182</td>\n",
              "      <td>26</td>\n",
              "      <td>2020-01-25</td>\n",
              "      <td>107</td>\n",
              "      <td>310</td>\n",
              "      <td>1</td>\n",
              "      <td>107</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>377</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>182</td>\n",
              "      <td>83</td>\n",
              "      <td>2020-01-27</td>\n",
              "      <td>119</td>\n",
              "      <td>310</td>\n",
              "      <td>0</td>\n",
              "      <td>116</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>606</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a58364ed-bda3-4fb0-85bc-6bd12511f5b8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a58364ed-bda3-4fb0-85bc-6bd12511f5b8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a58364ed-bda3-4fb0-85bc-6bd12511f5b8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   player_id  battle_seq_num        date  ...  survived  battle_level  is_tier_ten\n",
              "0        182              81  2020-01-27  ...         0             5            0\n",
              "1        182              91  2020-01-27  ...         1             5            0\n",
              "2        182              18  2020-01-25  ...         0             5            0\n",
              "3        182              26  2020-01-25  ...         0             6            0\n",
              "4        182              83  2020-01-27  ...         0             5            0\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "7Ti35WJYHgva"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import logging\n",
        "logger = tf.get_logger()\n",
        "logger.setLevel(logging.ERROR)"
      ],
      "metadata": {
        "id": "d-xvnKA7WNpY"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "l0 = tf.keras.layers.Dense(units=1, input_shape=[1])"
      ],
      "metadata": {
        "id": "r6j3MhXFW5Bg"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = tf.keras.Sequential([l0])"
      ],
      "metadata": {
        "id": "28AZJrfUW5EK"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss='mean_squared_error',\n",
        "              optimizer=tf.keras.optimizers.Adam(0.1))"
      ],
      "metadata": {
        "id": "wertbQaHW5JK"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "outputs1 = train['is_tier_ten']"
      ],
      "metadata": {
        "id": "DfaIONw6XSL-"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inputs1 = train[['battle_seq_num','damage_dealt','damage_received', 'kills_made', 'xp', 'shots', 'successful_shots', 'mileage', 'is_winner', 'survived']]"
      ],
      "metadata": {
        "id": "lCvvunN4W5L4"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RRsTJF6kZJad",
        "outputId": "c6ed70d2-eb75-4995-e5fd-a8b7b2675d60"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "player_id             int64\n",
              "battle_seq_num        int64\n",
              "date                 object\n",
              "damage_dealt          int64\n",
              "damage_received       int64\n",
              "kills_made            int64\n",
              "xp                    int64\n",
              "shots                 int64\n",
              "successful_shots      int64\n",
              "mileage               int64\n",
              "is_winner             int64\n",
              "survived              int64\n",
              "battle_level        float64\n",
              "is_tier_ten           int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "W1wTheXcWzLz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(inputs1, outputs1, epochs=500, verbose=False)\n",
        "print(\"Finished training the model\")"
      ],
      "metadata": {
        "id": "A4dk20BE0VJE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 749
        },
        "outputId": "0ab84cdb-dc8e-4071-f2a4-5a1e6c324464"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-26-646aa3695a2b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m500\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Finished training the model\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mautograph_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1145\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1146\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ag_error_metadata\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1147\u001b[0;31m               \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mag_error_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1148\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1149\u001b[0m               \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1021, in train_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1010, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1000, in run_step  **\n        outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 859, in train_step\n        y_pred = self(x, training=True)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 67, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/input_spec.py\", line 249, in assert_input_compatibility\n        f'Input {input_index} of layer \"{layer_name}\" is '\n\n    ValueError: Exception encountered when calling layer \"sequential\" (type Sequential).\n    \n    Input 0 of layer \"dense\" is incompatible with the layer: expected axis -1 of input shape to have value 1, but received input with shape (None, 10)\n    \n    Call arguments received:\n      • inputs=tf.Tensor(shape=(None, 10), dtype=int64)\n      • training=True\n      • mask=None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "v8oSk3-G0VWM"
      }
    }
  ]
}